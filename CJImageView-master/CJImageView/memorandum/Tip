
iOS14 隐私适配及部分解决方案
https://www.jianshu.com/p/1803bd950b90
适配点

▐ 相册
 iOS14 新增了“Limited Photo Library Access” 模式，在授权弹窗中增加了 Select Photo 选项。用户可以在 App 请求调用相册时选择部分照片让 App 读取。从 App 的视⻆来看，你的相册里就只有这几张照片，App 无法得知其它照片的存在。


背景：WWDC在2019有session提出。到2020年4月，上架APP的启动页必须使用launchscreen.storyboard，不能再使用assert方式了，后面延迟到2020年6月，现在6月已过，就来说下launchscreen.storyboard的使用以及里面遇见的坑。


如果你的应用使用了第三方或社交账号登录服务（如Facebook、Google、Twitter、LinkedIn、Amazon、微信等）来设置或验证用户的主账号，就必须把 Sign In With Apple 作为同等的选项添加到应用上。


1. 私有方法 KVC 可能导致崩溃  // 崩溃 api
UITextField *textField = [searchBar valueForKey:@"_searchField"];



2. 推送的 deviceToken 获取到的格式发生变化


UIWebView 将被禁止提交审核


卡顿：
文本处理（尺寸计算、绘制）
图片处理（解码、绘制）

离屏渲染消耗性能的原因
需要创建新的缓冲区
离屏渲染的整个过程，需要多次切换上下文环境，先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上，又需要将上下文环境从离屏切换到当前屏幕
图片加载
1.加载小图片\使用频率比较高的图片
1> 利用imageNamed:方法加载过的图片, 永远有缓存, 这个缓存是由系统管理的, 无法通过代码销毁缓存
通过 imageNamed 创建 UIImage 时，系统实际上只是在 Bundle 内查找到文件名，然后把这个文件名放到 UIImage 里返回，并没有进行实际的文件读取和解码。当 UIImage 第一次显示到屏幕上时，其内部的解码方法才会被调用，同时解码结果会保存到一个全局缓存去。在图片解码后，App 第一次退到后台和收到内存警告时，该图片的缓存才会被清空，其他情况下缓存会一直存在。
2.加载大图片\使用频率比较低的图片(一次性的图片, 比如版本新特性的图片)
1> 利用initWithContentsOfFile:\imageWithContentsOfFile:等方法加载过的图片, 没有缓存, 只要用完了, 就会自动销毁








https://www.jianshu.com/p/432fea0232b8
2、像素对齐 VS 像素不对齐

逻辑像素（point）乘以2（2x的视网膜屏） 或3（3x的视网膜屏）得到整数值，或者说得到的浮点数且小数点后都是0的，这就像素对齐了，否则就是像素不对齐。

出现像素不对齐的情况，会导致在GPU渲染时，对没对齐的边缘，需要进行插值计算，这个插值计算的过程会有性能损耗。


解决办法
一、文本计算的坑
理论上设置View的大小，最好预先设置好，尽量不要计算。
使用尽可能下的数值，0.01还不够小，直接使用系统提供的CGFLOAT_MIN吧。

三、图片像素不对齐的情况




像素混合
像素混合是指在某视图为透明背景色，GPU在渲染视图时，需要将该视图和下层视图混合(Blend)后才能计算出该像素点的实际颜色；这增加了GPU的工作，损耗了性能。
iPhone模拟器中的Debug ->Color Blended Layers
发生了像素混合的区域显示红色，正常则显示绿色。




App Store App申请审核加速
1、Apple 提供了一个加速审核的通道：
https://developer.apple.com/appstore/contact/appreviewteam/index.html

https://github.com/facebook?q=&type=&language=objective-c%2B%2B



正则表达式，又称正规表示法，是对字符串操作的一种逻辑公式。正则表达式可以检测给定的字符串是否符合我们定义的逻辑，也可以从字符串中获取我们想要的特定部分。它可以迅速地用极简单的方式达到字符串的复杂控制。
NSRegularExpression
// <a href="sinaweibo://customweibosource" rel="nofollow">iPhone 5siPhone 5s</a>
static NSRegularExpression *hrefRegex, *textRegex;
static dispatch_once_t onceToken;
dispatch_once(&onceToken, ^{
    hrefRegex = [NSRegularExpression regularExpressionWithPattern:@"(?<=href=\").+(?=\" )" options:kNilOptions error:NULL];
    textRegex = [NSRegularExpression regularExpressionWithPattern:@"(?<=>).+(?=<)" options:kNilOptions error:NULL];
});
NSTextCheckingResult *hrefResult, *textResult;
NSString *href = nil, *text = nil;
hrefResult = [hrefRegex firstMatchInString:_status.source options:kNilOptions range:NSMakeRange(0, _status.source.length)];
textResult = [textRegex firstMatchInString:_status.source options:kNilOptions range:NSMakeRange(0, _status.source.length)];



NSPredicate:是预测的意思 但是我们常翻译成谓词
使用NSPredicate可以定义模糊查询条件 根据一定的条件 我们就可以从一个数组中快速找出 符合一定条件的元素对象


 NSString* number=@"^[0-9]+$";
    NSPredicate *numberPre = [NSPredicate predicateWithFormat:@"SELF MATCHES %@",number];
    return [numberPre evaluateWithObject:textString];

NSString *string = @"Lorem    ipsum dolar   sit  amet.";
string = [string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];

NSArray *components = [string componentsSeparatedByCharactersInSet:[NSCharacterSet whitespaceCharacterSet]];
components = [components filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@"self <> ''"]];



NSCharacterSet:其实是许多字符或者数字或者符号的组合，在网络处理的时候会用到
    stringByTrimmingCharactersInSet//这个方法 仅仅 去除了 开头 和 结尾 的指定字符集中连续字符




NSScanner是一个类，用于在字符串中扫描指定的字符，尤其是把它们翻译/转换为数字和别的字符串。
{
    NSString *bananas = @"t123.321abc137d efg/hij kl";
     NSString *separatorString = @"fg";
     BOOL result;

     NSScanner *aScanner = [NSScanner scannerWithString:bananas];

     //扫描字符串
     //扫描到指定字符串时停止，返回结果为指定字符串之前的字符串
     NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    
    
    NSString *container;
        result = [aScanner scanUpToString:separatorString intoString:&container];
        NSLog(@"扫描成功：%@", result?@"YES":@"NO");
        NSLog(@"扫描的返回结果：%@", container);
        NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    
    
    //扫描整数
      //将会接着上一次扫描结束的位置继续扫描
      NSLog(@"-------------------------------------1");
      NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
      NSInteger anInteger;
      result = [aScanner scanInteger:&anInteger];
      NSLog(@"扫描成功：%@", result?@"YES":@"NO");
      NSLog(@"扫描的返回结果：%ld", anInteger);
      NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    
    
    NSLog(@"-------------------------------------2");
    aScanner.scanLocation = 1;      //将扫描仪的位置置为首位置
    NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    NSInteger anInteger2;
    result = [aScanner scanInteger:&anInteger2];
    NSLog(@"扫描成功：%@", result?@"YES":@"NO");
    NSLog(@"扫描的返回结果：%ld", anInteger2);
    NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    
    
    NSLog(@"-------------------------------------5");
    aScanner.scanLocation = 0;      //将扫描仪的位置置为首位置
    NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    NSString *str;
    NSCharacterSet *characterSet = [NSCharacterSet characterSetWithCharactersInString:@"/"];
    result = [aScanner scanUpToCharactersFromSet:characterSet intoString:&str];
    NSLog(@"扫描成功：%@", result?@"YES":@"NO");
    NSLog(@"扫描的返回结果：%@", str);
    NSLog(@"扫描仪所在的位置：%lu", aScanner.scanLocation);
    
    
    NSLog(@"-------------------------------------6");
    NSString * numStr = @"a 1 b 2 c 3 d 4 e 5 f 6 o";
        NSScanner * bscanner = [NSScanner scannerWithString:numStr];
        NSCharacterSet * numSet = [NSCharacterSet decimalDigitCharacterSet];
        while ( NO == [bscanner isAtEnd]) {
            NSString * intoStr2;
            NSLog(@"----%ld",bscanner.scanLocation);
            if ([bscanner scanUpToCharactersFromSet:numSet intoString:&intoStr2]) {
//                NSLog(@"-----------%@",intoStr2);
                NSLog(@"----%ld",bscanner.scanLocation);
                int num;
                if ([bscanner scanInt:&num]) {
                    NSLog(@"num=%d, %ld",num, bscanner.scanLocation);
                }
            }
        }
}

打开其他App
        NSURL *url = [NSURL URLWithString:@"asusMallOpen://store.asus.com.cn"];

        if ([[UIApplication sharedApplication] canOpenURL:url]){
            [[UIApplication sharedApplication] openURL:url options:@{} completionHandler:^(BOOL success) {

            }];
        }
UniversalLink Associated Domains
Universal Link的基本运作流程:
APP第一次启动或APP更新版本后第一次启动
APP向工程里配置的域名发起Get请求拉取配置好存放在https服务器上的apple-app-association文件
APP将apple-app-association注册给系统
由任意webview发起跳转的url，如果命中了apple-app-association注册过的通用链接
打开App，触发Universal Link delegate
没命中，webview继续跳转url

https://www.macdo.cn/21880.html
Microsoft_Office_16.23.19030902_Installer_32819


1.Widgets(小组件)
3d touch


https://blog.csdn.net/deft_mkjing/article/details/79866973

https://www.jianshu.com/p/13c4fb1cedea //weak 底层实现

各位评委你们好，我是林海阳，今年32岁，从事iOS开发5年时间，很荣幸有机会来参加公司的面试。


我是我朋友带进这行业的，我以前学工业工程的，做了两年做的并不好，我觉得这个行业很难做不出成绩，中间也是频繁换工作，就一些台企会招这个岗位的工作，
