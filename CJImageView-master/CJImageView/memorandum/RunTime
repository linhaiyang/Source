  
  

  用来干什么 基本作用:
在程序运行过程中，动态的创建类，动态添加、修改这个类的属性和方法；
遍历一个类中所有的成员变量、属性、以及所有方法
消息传递、转发


用在哪些地方 Runtime的典型事例:
给系统分类添加属性、方法
方法交换
获取对象的属性、私有属性
字典转换模型
KVC、KVO
归档(编码、解码)
NSClassFromString class<->字符串
block
类的自我检测

@interface NSObject <NSObject> {
    Class isa  OBJC_ISA_AVAILABILITY;
}
  
/// An opaque type that represents an Objective-C class
Class代表的是一个Objective-C的类
typedef struct objc_class *Class;
  struct objc_class {
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;

#if !__OBJC2__
    Class _Nullable super_class                              OBJC2_UNAVAILABLE;
    const char * _Nonnull name                               OBJC2_UNAVAILABLE;
    long version                                             OBJC2_UNAVAILABLE;
    long info                                                OBJC2_UNAVAILABLE;
    long instance_size                                       OBJC2_UNAVAILABLE;
    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;
    struct objc_method_list * _Nullable * _Nullable methodLists       // Class里定义了一些你可以给对象发送的方法。
    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;
    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;
#endif
  Class是一个指向结构体objc_class的指针，objc_class也有一个isa指针。既然上面说到NSObject对象的isa是代表着类（Class），那这个Class结构体里的isa指针又是代表什么呢？没错，就是我们要说的metaClass(元类)~
  

  struct objc_class //代表的是一个Objective-C的类
typedef struct objc_object {//表示类的实例

Class isa;

} *id;//指向类实例的指针














@interface Test: UIViewController

@end
 Test *testObj = [[Test alloc] init];
NSLog(@"testObj address: %p.",testObj);

Class currentClass = object_getClass(testObj);
for (int i = 0; i < 5; i ++) {
    NSLog(@"%d time isa points to address: %p",i+1,currentClass);
    currentClass = object_getClass(currentClass);
}
NSLog(@"NSObject's class address: %p",[NSObject class]);
NSLog(@"NSObject's metaClass address: %p",object_getClass([NSObject class]));

NSLog(@"Test's class address: %p.",[Test class]);
Class superClass = class_getSuperclass([Test class]);
for (int i = 0; i < 5; i ++) {
    NSLog(@"%d time super_class points to addrss: %p",i+1,superClass);
    superClass = class_getSuperclass(superClass);
}
NSLog(@"NSObject's superClass address: %p",class_getSuperclass([NSObject class]));

Test[3541:930356] testObj address: 0x104d0c0b0.
Test[3541:930356] 1 time isa points to address: 0x10488cee8
Test[3541:930356] 2 time isa points to address: 0x10488cf10
Test[3541:930356] 3 time isa points to address: 0x22b3a4ec8
Test[3541:930356] 4 time isa points to address: 0x22b3a4ec8
Test[3541:930356] 5 time isa points to address: 0x22b3a4ec8
Test[3541:930356] NSObject's class address: 0x22b3a4ea0
Test[3541:930356] NSObject's metaClass address: 0x22b3a4ec8
Test[3541:930356] Test's class address: 0x10488cee8.
Test[3541:930356] 1 time super_class points to addrss: 0x22b53af30
Test[3541:930356] 2 time super_class points to addrss: 0x22b53ae18
Test[3541:930356] 3 time super_class points to addrss: 0x22b3a4ea0
Test[3541:930356] 4 time super_class points to addrss: 0x0
Test[3541:930356] 5 time super_class points to addrss: 0x0
Test[3541:930356] NSObject's superClass address: 0x0

可见：

Test的class地址是0x10488cee8
Test的metaClass地址是0x10488cf10
Test的metaClass的父metaClass（metaClass的isa指针所指）地址是0x22b3a4ec8
这时，已经到了根metaClass，而根metaClass的isa都是指向同一个地址，而且也是根metaClass的地址，正好也验证了上面示意图的isa的指向。

Test的super_class(UIViewController的Class)地址是0x22b53af30
Test的super_class的super_class(UIResponder的Class，因为UIViewController继承UIResponder)地址是0x22b53ae18
Test的super_class的super_class的super_class（NSObject的Class，因为UIResponder继承NSObject）地址是0x22b3a4ea0
到了后面的super_class都已经是0x0，都指向了nil，正好也验证了上面示意图的super_class的指向。

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  property  自动生成成员变量（_属性名）
  {
    int _UserAge;成员变量
}
  
   //创建一个类
        Class superClass = [NSObject class];
        newClass = objc_allocateClassPair(superClass, className, 0);
        //注册你创建的这个类
        objc_registerClassPair(newClass);
  
  
    Class getclass=objc_getClass("ViewController");// @return The Class object for the named class0x000000010b7e62c0
//    Person *person = [[Person alloc] init];
    /// 向person 对象发送一条post方法 参数为2
    ((void(*)(id,SEL))objc_msgSend)(getclass,@selector(runTest));
//    其中(void(*)(id,SEL,int) 表示
//    返回类型为void 参数为id，方法名，参数类型
    {
        if (!_getter) {
            _getter = NSSelectorFromString(_name);
        }
        if (!_setter) {
            _setter = NSSelectorFromString([NSString stringWithFormat:@"set%@%@:", [_name substringToIndex:1].uppercaseString, [_name substringFromIndex:1]]);
        }
    }


respondsToSelector 用来判断某一个方法时候实现
instancesRespondToSelector 类方法

// 获取变量列表
class_copyIvarList(Class _Nullable cls, unsigned int * _Nullable outCount)
// 获取方法列表
class_copyMethodList(Class _Nullable cls, unsigned int * _Nullable outCount)
// 获取属性列表
class_copyPropertyList(Class _Nullable cls, unsigned int * _Nullable outCount)
iOS 消息机制(一)  runtime
添加方法
方法交换
获取类名父类

Runtime

对于实例方法，每个实例的 isa 指针指向着对应类对象，而每一个类对象中都一个对象方法列表。

static char overlayKey;
return objc_getAssociatedObject(self, &overlayKey);

objc_setAssociatedObject(self, &overlayKey, overlay, OBJC_ASSOCIATION_RETAIN_NONATOMIC);

objc_getAssociatedObject(self, _cmd);
objc_setAssociatedObject(self, _cmd, delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);


而根据具体情况，编译器会将消息发送修改为四种情况之一
objc_msgSend
objc_msgSend_stret
objc_msgSendSuper
objc_msgSendSuper_stret
比如我们调用[super xxx]的时候,则会改为objc_msgSendSuper的形式，而带有stret，表明方法返回值是一个结构体类型。

objc_getClass参数是类名的字符串，返回的就是这个类的类对象；
object_getClass参数是id类型，它返回的是这个id的isa指针所指向的Class，如果传参是Class，则返回该Class的metaClass。

实际上，类对象是元类对象的一个实例！！元类描述了 一个类对象，就像类对象描述了普通对象一样。
Class getclass=objc_getClass("ViewController");
    Class getclassH = objc_getClass("BaseViewController");
    Class metaClass = objc_getMetaClass(class_getName(getclass));
    Class metaClassH = objc_getMetaClass("BaseViewController");
    Class superClass_metaClass_parent = class_getSuperclass(metaClass);
    
    Class superClass_metaClass_child = class_getSuperclass(metaClassH);
    Class metaClass_NSObject = objc_getMetaClass("NSObject");
    Class superClass_metaClass_NSObject = class_getSuperclass(metaClass_NSObject);


/// Represents an instance of a class.表示类的实例。//通过注释和代码不难发现，我们创建的一个对象或实例其实就是一个struct objc_object结构体，而我们常用的id也就是这个结构体的指针。
struct objc_object {
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;//这个isa就指向了所属类（如str isa就指向了NSString类）
};
/// A pointer to an instance of a class.//指向类实例的指针。
typedef struct objc_object *id;

/// An opaque type that represents an Objective-C class.//表示Objective-C类（class object（类对象））

/// An opaque type that represents a method in a class definition.
typedef struct objc_method *Method;

/// An opaque type that represents an instance variable.//实例变量
typedef struct objc_ivar *Ivar;

/// An opaque type that represents a category.
typedef struct objc_category *Category;

/// An opaque type that represents an Objective-C declared property.//属性
typedef struct objc_property *objc_property_t;
struct objc_class {
    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;
#if !__OBJC2__
    Class _Nullable super_class                              OBJC2_UNAVAILABLE;
    const char * _Nonnull name                               OBJC2_UNAVAILABLE;
    long version                                             OBJC2_UNAVAILABLE;
    long info                                                OBJC2_UNAVAILABLE;
    long instance_size                                       OBJC2_UNAVAILABLE;
    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;
    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;
    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;
    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;
#endif

}//这就说明了Class本身其实也是一个对象，我们称之为类对象

@interface NSObject <NSObject> {
Class isa;
}


系统的Runtime库通过函数objc_msgSend以及OC对象中隐藏的isa数据成员来实现多态和运行时方法查找以及执行。
/*下面的例子是在arm64体系下的函数调用实现，本文中如果没有特殊说明都是指在arm64体系下的结论*/


    ((void(*)(id,SEL))objc_msgSend)(getclass,@selector(runTest));
//    其中(void(*)(id,SEL,int) 表示
//    返回类型为void 参数为id，方法名，参数类型

系统的Runtime库通过函数objc_msgSend以及OC对象中隐藏的isa数据成员来实现多态和运行时方法查找以及执行。每个对象的isa中保存着这个对象的类对象指针，类对象是一个Class类型的数据，而Class则是一个objc_class结构体指针类型的别名，它被定义如下：typedef struct objc_class * Class;
