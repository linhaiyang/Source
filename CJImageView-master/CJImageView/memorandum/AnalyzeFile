
使用Xcode自带的静态分析工具 Product->Analyze(快捷键command+shift+B)可以找出代码潜在错误,如内存泄露,未使用函数和变量等
1、逻辑错误：访问空指针或未初始化的变量等；
2、内存管理错误：如内存泄漏等； 比如ARC下,内存管理不包括core foundation
3、声明错误：从未使用过的变量；
4、Api调用错误：未包含使用的库和框架。

Product->Profile
2.Activity Monitor（活动监视器）：监控进程级别的CPU,内存,磁盘，网络使用情况，可以得到你的应用程序在手机运行时总共占用的内存大小
10.Leaks（泄漏）：一般的措施内存使用情况，检查泄漏的内存，并提供了所有活动的分配和泄漏模块的类对象分配统计信息以及内存地址历史记录；.
8.Energy Log： 耗电量监控
15.Time Profiler（时间探查）：执行对系统的CPU上运行的进程低负载时间为基础采样。



内存泄露指当一个对象或变量在使用完成后没有释放掉, 这个对象一直占用着这部分内存, 直到应用停止.

内存优化：
一: 卡顿检测
runloop卡顿检测
和Core Animation 类似,YYFPSLabel放到屏幕上就可以检测刷新帧率,CADisplayLink调用频率和屏幕的刷帧频率一致，60FPS 左右,如果主线程卡顿,CADisplayLink调用频率较少
CADisplayLink NSTimer依赖于RunLoop，如果RunLoop的任务过于繁重，可能会导致NSTimer不准时,而且容易造成循环引用.(循环引用导致内存泄漏,内存就会偏高)

7 尽量避免日期格式转换 [NSDate dateWithString:@"1990-11-11" format:@"yyyy-MM-dd"]
8 尽量把耗时的操作放到子线程
文本处理（尺寸计算、绘制）
图片处理（解码、绘制）
/**/
1.加载小图片\使用频率比较高的图片
1> 利用imageNamed:方法加载过的图片, 永远有缓存, 这个缓存是由系统管理的, 无法通过代码销毁缓存

2.加载大图片\使用频率比较低的图片(一次性的图片, 比如版本新特性的图片)
1> 利用initWithContentsOfFile:\imageWithContentsOfFile:等方法加载过的图片, 没有缓存, 只要用完了, 就会自动销毁

