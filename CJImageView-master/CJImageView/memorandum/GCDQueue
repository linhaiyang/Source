//在主线程中，所有的操作都是同步执行的


dispatch_queue_t mainQueue = dispatch_get_main_queue();
dispatch_sync(mainQueue, ^{
    NSLog(@"为啥堵塞");
});



dispatch_queue_t queue = dispatch_queue_create("abc", DISPATCH_QUEUE_SERIAL);
dispatch_sync(queue, ^{
    NSLog(@"为啥不堵塞");
});


如上，两段代码，都运行在主线程中，mainQueue也是串行队列，为什么代码1会造成线程阻塞，而代码2不会阻塞?或者说代码2不会阻塞大家可能都了解，为什么在主队列调用dispatch_sync就会阻塞？


1.App：主线程，你过来，给你个任务，任务完成后再走
主线程：什么任务？
App：你去那边打印机上，打印个东西，但是你不能离开这里，完成后才能走
主线程：……

2.App：主线程，你过来，给你个任务，任务完成后再走
主线程：什么任务？
App：你叫 **abc** 去那边打印机上，打印个东西，但是你不能离开这里，完成后才能走
主线程：**abc**，快去打印个东西，现在就要！



  /**
     同步执行 + 并发队列
     异步执行 + 并发队列
     同步执行 + 串行队列
     异步执行 + 串行队列
     区别                                 并发队列                                      串行队列                                                    主队列
     同步（sync）    没有开启新线程，串行执行任务                没有开启新线程，串行执行任务                死锁卡住不执行
     异步（async）    有开启新线程，并发执行任务                 有开启新线程（1条），串行执行任务        没有开启新线程，串行执行任务


     DISPATCH_QUEUE_SERIAL 队列中不能添加sync(queue),造成死锁
     没有开启新的线程，线程中任务都是串行执行
     
     并发功能只有在异步函数(dispatch_async)下才有效



线程安全
    pthread_mutex_t _mutex;
    
    pthread_mutex_init(&_mutex, NULL);//初始化


    pthread_mutex_lock(&_mutex);线程安全锁
    BOOL disposed = _disposed;
    pthread_mutex_unlock(&_mutex);
