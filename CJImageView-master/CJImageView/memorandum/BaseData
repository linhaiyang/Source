

1.4 Tagged Pointer

从64bit开始，iOS引入了Tagged Pointer技术，用于优化NSNumber、NSDate、NSString等小对象的存储

在没有使用Tagged Pointer之前， NSNumber等对象需要动态分配内存、维护引用计数等，NSNumber指针存储的是堆中NSNumber对象的地址值
可见，当 8 字节可以承载用于表示的数值时，系统就会以Tagged Pointer的方式生成指针，如果 8 字节承载不了时，则又用以前的方式来生成普通的指针。
number1 pointer is 0xb000000000000012  ---8 字节  2个十六进制一个字节
这是因为，字符串的abc采用的是Tagged Pointer技术，不是一个标准的OC对象。不存在说再堆上开辟空间存储对象什么的。

---contentInsetAdjustmentBehavior  background modes
当使用局部变量 str 指向这个对象时，这个对象的引用计数 +1 ，变成了 2 。
//用copys修饰的生成的都是不可变的对象 ,如果调用可变类型方法的直接报错
1.当copy的对象类型为不可变对象如NSString类型时，和Strong修饰作用是一样的
strong修饰的属性(name)并不会开辟新的内存，而是直接强引用已有的内存(tempName的内存)
当一个对象(aPerson)的某个属性(name)的类型存在可变子类(NSMutableString: NSString)时, 赋值给该属性的对象(tempName)，如果是可变的，修改该对象(tempName)的值，会影响到这个属性(name)的值，这显然不是我们希望的。

由于指向可变的对象，用copy修饰的话就算对象的值发生改变也不会影响本身
对于系统的非容器类对象，对一不可变对象复制，copy是指针复制（浅拷贝,引用计数+1）和mutableCopy就是对象复制（深拷贝 新的对象）。如果是对可变对象复制，都是深拷贝，但是copy返回的对象是不可变的。
对于系统的容器类对象，以上规则同样适用，但是容器内的元素全部都是浅拷贝，也就是说所有的元素拷贝的仅仅是指针，内存没被复制。

.assign 也可以修饰对象，但是用 assign 修饰的对象在释放后，指针的地址还是存在的，也就是说指针并没有被置为 nil ，会造成众所周知的野指针异常。，assign 修饰的基础数据类型一般分配在栈空间上，栈空间的内存会由系统自动处理，当分配的栈空间的内存没有被指针指向时就会被销毁，所以不会造成野指针异常。
weak 比 assign 多了一个功能就是当属性所指向的对象消失的时候（也就是内存引用计数为0）会自动赋值为 nil ，这样再向 weak 修饰的属性发送消息就不会导致野指针操作 crash 。
/**
 
 当类对象被引入项目时, runtime 会向每一个类对象发送 load 消息. load 方法还是非常的神奇的, 因为它会在每一个类甚至分类被引入时仅调用一次, 调用的顺序是父类优先于子类, 子类优先于分类. 而且 load 方法不会被类自动继承, 每一个类中的 load 方法都不需要像 viewDidLoad 方法一样调用父类的方法. 由于 load 方法会在类被 import 时调用一次, 而这时往往是改变类的行为的最佳时机. 我在 DKNightVersion 中使用 method swizlling 来修改原有的方法时, 就是在分类 load 中实现的.
 */
[GlobalUserDefault userID]?:@"游客"]
+(void)load{
    Dlog(@"loadAinitializeTest-----load");
}

@protocol NSCopying  [object copy]

- (id)copyWithZone:(nullable NSZone *)zone;

@end

@protocol NSMutableCopying

- (id)mutableCopyWithZone:(nullable NSZone *)zone;

@end

@protocol NSCoding

- (void)encodeWithCoder:(NSCoder *)coder;
- (nullable instancetype)initWithCoder:(NSCoder *)coder; // NS_DESIGNATED_INITIALIZER
@end
/**
 该类的第一个方法执行之前调用
 */
+(void)initialize{
    Dlog(@"loadAinitializeTest-----initialize");
}

+(void)initializeTestBegin{
    Dlog(@"loadAinitializeTest-----initializeBegin");
}


nil：指向一个对象的空指针,对objective c id 对象赋空值.
Nil：指向一个类的空指针,表示对类进行赋空值.
NULL：指向其他类型（如：基本类型、C类型）的空指针, 用于对非对象指针赋空值.
NSNull：在集合对象中，表示空值的对象.


__attribute__ ((warn_unused_result))----：如果某个函数使用了这个关键字，那么函数在被调用的时候，要检查或者使用返回值，某则编译器会进行警告。
__attribute__(相关属性)

1.---unavailable
__attribute__((unavailable("这个方法无效了，你不能调用了")));

2.---availability
introduced：引进的版本
deprecated：废弃的版本，还能使用，并没有移除，而是提醒用户迁移到其他API
obsoleted：移除的版本，不能再使用
unavailable：那些平台不能用
message：额外提示信息，比如迁移到某某API
__attribute__((availability(ios,introduced=2_0,deprecated=7_0,obsoleted=11_0,message="将在ios11进行移除哦")));

3.nonnull 译器对函数参数进行检查，不能为null
__attribute__((nonnull(1,2,3)));//指定三个参数不能为空，

4.cleanup
前面我们说了用这个可以在作用域结束的时候执行指定的方法

5.objc_requires_super 表示子类在重新父类的方法的时候，必须先调用super方法，否则会有警告

6.objc_subclassing_restricted 表示该类不能被继承


当APP进入后台，此时的APP所占用的内存就不是由我们自己控制，而是由系统去控制。当系统认为其他应用需要占用内存时，系统会优先把进入后台的APP Kill掉，进而释放内存供其他应用使用。


从文字上来描述区别就是
while先判断后执行，do while先执行后判断
当不满足循环条件时，while循环一次都不会执行，do while循环至少执行一次
int i = 0;
        do {
            i ++;
            Log.e(TAG, "i = " + i);
        } while (i < 5);
        
 int i = 0;
        while (i < 5) {
            i ++;
            Log.e(TAG, "i = " + i);
        }





px: pixel，像素，屏幕上显示的最小单位。

pt: point ，点，是一个标准的长度单位，1pt＝1/72英寸.

iPhone 4之后(x, y, width, height) = (20, 30, 40, 50)，就表示高度为40个点，宽度为50个点，放在(20, 20)个点的位置。这种处理方法，将之前以像素作为单位自动转换成以点作为单位，使得iPhone 3GS的应用程序，不用修改也可运行在iPhone 4上面。
而图片并非矢量数据，处理方式有所不同。假设图片 example.png，大小为 30 x 40像素（这里的单位是像素，数字图片的单位通常都为像素）。当这张example.png在iPhone 3GS和iPhone 4中使用时候，都占据屏幕上30 x 40个点。而因为iPhone 4中1个点等于2个像素，也就是30 x 40像素的图片，占据了60 x 80像素的屏幕，因此这图片在iPhone 4中看起来就会模糊。




https://www.jianshu.com/p/cbdf76959406  //iOS基础之字节处理

https://www.cnblogs.com/1-434/articles/10580036.html  //Tagged Pointer
Tagged Pointer指针的值不再是地址了，而是真正的值。所以，实际上它不再是一个对象了，它只是一个披着对象皮的普通变量而已。所以，它的内存并不存储在堆中，也不需要 malloc 和 free。
/***/OC对象存放于堆里面(堆内存要程序员手动回收)
非OC对象一般放在栈里面(栈内存会被系统自动回收)
栈区(stack) 由编译器自动分配并释放，存放函数的参数值，局部变量等。
堆区(heap) 由程序员分配和释放，如果程序员不释放，程序结束时，可能会由操作系统回 收 ，比如在ios 中 alloc 都是存放在堆中。优点是灵活方便，数据适应面广泛，但是效率有一定降低。
全局区(静态区) (static) 全局变量和静态变量的存储是放在一起的，初始化的全局变量和静 态变量存放在一块区域，未初始化的全局变量和静态变量在相邻的另一块区域，程序结束后由系统释放。
文字常量区存放常量字符串，程序结束后由系统释放;
代码区存放函数的二进制代码，程序结束后由系统释放

指针是其实也是一个对象，它指向一个内存地址单元，内存单元里存着各种变量。这样指针就可以指向这样变量，当我们用的时候我们就可以从内存单元取出变量内容。
如果电脑的存储器相当于一本书，那么指针就像粘在每一页的页码，想要哪页的内容直接找页码直接就会找到。

当 8 字节可以承载用于表示的数值时，系统就会以Tagged Pointer的方式生成指针，如果 8 字节承载不了时，则又用以前的方式来生成普通的指针。
在 2013 年 9 月，苹果推出了 iPhone5s，与此同时，iPhone5s 配备了首个采用 64 位架构的 A7 双核处理器，

https://blog.csdn.net/yiral/article/details/73468783  //NSScanner
https://www.jianshu.com/p/1803bd950b90      iOS14 隐私适配及部分解决方案
26 118 4.78 25
695 189
338 71

1.NSConcreteGlobalBlock 全局的静态block，不会访问外部的变量。就是说如果你的block没有调用其他的外部变量，那你的block类型就是这种。例如：你仅仅在你的block里面写一个NSLog(“hello world”);

2.NSConcreteStackBlock 保存在栈中的 block，当函数返回时会被销毁。这个block就是你声明的时候不用copy修饰，并且你的block访问了外部变量。

3.NSConcreteMallocBlock 保存在堆中的block，当引用计数为 0 时会被销毁。好了，这个就是今天的主角 ，用copy修饰的block。




  成员变量是定义在｛｝号中的变量，如果变量的数据类型是一个类则称这个变量为实例变量。
  @synthesize myButton;
　　这样写了之后，那么编译器会自动生成myButton的实例变量，以及相应的getter和setter方法。注意：_myButton这个实例变量是不存在的，因为自动生成的实例变量为myButton而不是_myButton，所以现在@synthesize的作用就相当于指定实例变量；
　　如果.m文件中写了@synthesize myButton;那么生成的实例变量就是myButton；如果没写@synthesize myButton;那么生成的实例变量就是_myButton。所以跟以前的用法还是有点细微的区别。

  {
  int y;
  UIButton * button;
}
  
